1. Загрузка конфигурации
Сначала создадим утилиту для загрузки конфигов:

python
from pathlib import Path
import yaml
from typing import Dict, Any

def load_all_configs() -> Dict[str, Any]:
    """Загружает все конфиги из папки configs"""
    config_dir = Path(__file__).parent / "configs"
    configs = {}
    
    for config_file in config_dir.glob("*.yaml"):
        with open(config_file) as f:
            config_name = config_file.stem
            configs[config_name] = yaml.safe_load(f)
    
    return configs

CONFIGS = load_all_configs()
2. Адаптация классов под конфиги
TFIDFVectorizer:
python
class TFIDFVectorizer:
    def __init__(self, config=None):
        self.config = config or CONFIGS['model']['tfidf']
        self.vocab = {}
        self.idf = {}
        self.doc_count = 0
        
    def preprocess(self, text: str) -> list:
        """Адаптированная предобработка с учетом конфига"""
        preprocess_cfg = CONFIGS['preprocessing']['text_cleaning']
        
        if preprocess_cfg['lowercase']:
            text = text.lower()
        
        if preprocess_cfg['remove_punctuation']:
            text = re.sub(r'[^\w\s]', '', text)
            
        if preprocess_cfg['remove_extra_spaces']:
            text = ' '.join(text.split())
            
        return text.split()
SemanticSearch:
python
class SemanticSearch:
    def __init__(self, search_config=None, model_config=None):
        self.search_config = search_config or CONFIGS['search']
        self.model_config = model_config or CONFIGS['model']
        
        # Инициализация модели с учетом конфига
        if self.model_config['use_tfidf']:
            self.vectorizer = TFIDFVectorizer(self.model_config['tfidf'])
        else:
            self.vectorizer = SimpleWord2Vec(self.model_config['word2vec'])
            
        self.documents = []
        self.doc_vectors = []

    def cosine_similarity(self, vec_a, vec_b):
        """Метрика схожести из конфига"""
        metric = self.search_config['similarity']['metric']
        
        if metric == 'cosine':
            if np.linalg.norm(vec_a) == 0 or np.linalg.norm(vec_b) == 0:
                return 0
            return np.dot(vec_a, vec_b) / (np.linalg.norm(vec_a) * np.linalg.norm(vec_b))
        elif metric == 'euclidean':
            return 1 / (1 + np.linalg.norm(vec_a - vec_b))
3. Пример использования в пайплайне
python
def run_semantic_search_pipeline(documents, query):
    # Инициализация с кастомными параметрами (опционально)
    custom_search_config = {
        'similarity': {
            'threshold': 0.7,
            'expand_query': False
        }
    }
    
    search = SemanticSearch(search_config=custom_search_config)
    search.index(documents)
    
    # Получение параметров поиска из конфига
    top_k = CONFIGS['search']['results']['top_k']
    threshold = CONFIGS['search']['similarity']['threshold']
    
    results = search.search(query, threshold=threshold, top_k=top_k)
    
    # Применение пост-обработки из конфига
    if CONFIGS['search']['results']['remove_duplicates']:
        results = remove_duplicates(results)
    
    return results
4. Логирование конфигов
python
def log_configs():
    """Логирование загруженных конфигов для отладки"""
    import logging
    logger = logging.getLogger(__name__)
    
    for config_name, config in CONFIGS.items():
        logger.info(f"Loaded config '{config_name}':")
        for section, params in config.items():
            logger.info(f"  [{section}]")
            for param, value in params.items():
                logger.info(f"    {param}: {value}")
5. Пример тестирования с конфигами
python
def test_with_configs():
    # Загрузка тестовых данных из конфига путей
    test_data_path = Path(CONFIGS['paths']['data']['raw']) / "test_documents.txt"
    
    with open(test_data_path) as f:
        test_documents = [line.strip() for line in f if line.strip()]
    
    # Запуск пайплайна
    results = run_semantic_search_pipeline(
        documents=test_documents,
        query="пример запроса"
    )
    
    # Сохранение результатов согласно конфигу
    output_dir = Path(CONFIGS['paths']['results']['searches'])
    output_dir.mkdir(exist_ok=True)
    
    with open(output_dir / "latest_results.json", "w") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
6. Динамическое обновление конфигов
python
def update_config(config_name: str, updates: dict):
    """Обновление конфига в runtime"""
    if config_name in CONFIGS:
        CONFIGS[config_name].update(updates)
        
        # Сохранение изменений обратно в файл (опционально)
        config_path = Path(__file__).parent / "configs" / f"{config_name}.yaml"
        with open(config_path, "w") as f:
            yaml.safe_dump(CONFIGS[config_name], f)
    else:
        raise ValueError(f"Unknown config: {config_name}")
